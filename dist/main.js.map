{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/main.js","webpack:///./src/models/Image/GrayscaleImage.model.js","webpack:///./src/models/Image/Image.model.js","webpack:///./src/models/Image/RGBAImage.model.js","webpack:///./src/models/layout/viewer.model.js","webpack:///./src/transformations/converters/GrayscaleToImageData.converter.js","webpack:///./src/transformations/converters/RGBAToGrayscale.converter.js","webpack:///./src/transformations/converters/RGBAToImageData.converter.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA,gBAAgB,mBAAO,CAAC,yEAA8B;AACtD,mBAAmB,mBAAO,CAAC,6EAAgC;AAC3D;AACA,qBAAqB,mBAAO,CAAC,6HAAwD;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,kC;;AAEA;;AAEA,sBAAsB,mBAAmB;AACzC,iE;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,IAAI,IAA6B;AACjC;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;AC1HA,mBAAmB,mBAAO,CAAC,gEAAmB;;AAE9C;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA,0BAA0B,mBAAO,CAAC,2IAAiE;AACnG;AACA;AACA;;AAEA,gC;;;;;;;;;;;ACdA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;;;;;;ACtDA,mBAAmB,mBAAO,CAAC,wDAAe;;AAE1C;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA,0BAA0B,mBAAO,CAAC,iIAA4D;AAC9F;AACA;AACA;;AAEA,2B;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,wB;;;;;;;;;;;ACjDA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA,E;;;;;;;;;;;AClBA,uBAAuB,mBAAO,CAAC,2FAAyC;;AAExE;AACA,+C;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA,kBAAkB,yBAAyB;AAC3C;AACA;AACA;AACA;AACA,2C;;;AAGA;AACA;;AAEA;;AAEA;AACA,E;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,yBAAyB;AAC5C;AACA;;AAEA;AACA,E","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","window.Viewer = require('./models/layout/viewer.model');\nwindow.RGBAImage = require('./models/Image/RGBAImage.model');\nwindow.Transformations = {\n    RGBAToGrayscale: require('./transformations/converters/RGBAToGrayscale.converter')\n};\n\nclass MyCanvas {\n    constructor(canvas_id) {\n        this.dom_elt = document.getElementById(canvas_id);\n        this.context = this.dom_elt.getContext('2d');\n        this.image = null;\n        this.imageElt = null;\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        //this.context.width = width;\n        this.dom_elt.width = width;\n        this.dom_elt.style.width = width  + 'px';\n\n        this.height = height;\n        // this.context.height = height;\n        this.dom_elt.height = height;\n        this.dom_elt.style.height = height + 'px';\n    }\n\n    clear() {\n        this.context.fillStyle = 'green';\n        this.context.fillRect(0, 0, this.width, this.height);\n    }\n\n    openImage(blob) {\n        const reader = new FileReader();\n        reader.onload = () => {\n            const image = new Image();\n            image.onload = () => {\n                this.setImage(image);\n            };\n\n            image.src = reader.result;\n        };\n\n        reader.readAsDataURL(blob);\n    }\n\n    loadImage(url) {\n        const imageElt = new Image();\n        image.crossOrigin = \"\";\n        image.src = url;\n        image.onload = () => {\n            this.setImage(image);\n        }\n    }\n\n    reset() {\n        this.drawImageData(this.getImage());\n    }\n\n    setImage(image) {\n        this.imageElt = image;\n        console.log(image.width, image.height)\n        this.setSize(image.width, image.height);\n        this.context.drawImage(image,0,0);\n\n        this.image = this.context.getImageData(0, 0, this.width, this.height);\n    }\n\n    drawImage(image) {\n        console.log(image)\n        this.context.drawImage(image, 0, 0);\n    }\n\n    sobel(image) {\n        \n\n            // todo grayscale\n        return output;\n    }\n\n    getGrayscale(image) {\n          \n    }\n\n    thresholding(threshold) {\n        const input = this.getGrayscale(this.getImage());\n        const pixels = input.data; \n\n        const output = this.context.createImageData(this.width, this.height);\n\n        for(var i = 0; i < pixels.length; i += 4) {\n            const intensity = (pixels[i] >= threshold) ? 255 : 0; \n\n            output.data[i] = intensity;\n            output.data[i + 1] = intensity;\n            output.data[i + 2] = intensity;\n            output.data[i + 3] = 255;\n\n        }\n\n        return output;\n    }\n\n    drawImageData(imageData) {\n        console.log('drawImageData', imageData);\n        this.context.putImageData(imageData, 0, 0);\n    }\n\n    getImage() {\n        return this.image;\n    }\n\n    threshold() {\n        //\n    }\n}\n\nif (typeof module !== 'undefined') {\n    module.exports = MyCanvas;\n}\n\nif (typeof window !== 'undefined') {\n    window.MyCanvas = MyCanvas;\n}\n","const BasicImage = require('./RGBAImage.model');\n\nclass GrayscaleImage extends BasicImage {\n    constructor(settings = {}) {\n        settings.nbChannels = 1;\n        super(settings);\n    }\n\n    getImageData() {\n        const converter = require('../../transformations/converters/GrayscaleToImageData.converter');\n        return converter(this);\n    }\n}\n\nmodule.exports = GrayscaleImage;","class BasicImage {\n    constructor(settings = {}) {\n        this.mimetype = '';\n        this.pixels = [];\n        this.nbChannel = 4;\n        this.resolution = {\n            x: settings.width || 0,\n            y: settings.height || 0\n        }\n\n        if (typeof settings.pixels === 'undefined') {\n            this.pixels = new Uint8Array(this.resolution.x * this.resolution.y * this.nbChannel);\n        }\n\n        else {\n            this.pixels = settings.pixels;\n        }\n    }\n\n    getPixels() {\n        return this.pixels;\n    }\n\n    getWidth() {\n        return this.resolution.x;\n    }\n\n    getHeight() {\n        return this.resolution.y;\n    }\n\n    getNbChannel() {\n        return this.nbChannel;\n    }\n\n    getImageData() {\n        throw new Error('Abstract method called \"BasicImage::getImageData\". Please overwrite in sub-class');\n    }\n\n    clone() {\n        const factory = this.constructor;\n        return new factory({\n            width: this.getWidth(),\n            height: this.getWidth()\n        });\n    }\n\n    render(context) {\n        const imageData = this.getImageData();\n        console.log(imageData);\n        context.putImageData(imageData, 0, 0);\n    }\n}\n\nmodule.exports = BasicImage;","const BasicImage = require('./Image.model');\n\nclass RGBAImage extends BasicImage {\n    constructor(settings = {}) {\n        settings.nbChannel = 4;\n        super(settings);\n    }\n\n    getImageData() {\n        const converter = require('../../transformations/converters/RGBAToImageData.converter');\n        return converter(this);\n    }\n}\n\nmodule.exports = RGBAImage;","class Viewer {\n    constructor(canvas_id) {\n        this.dom_elt = document.getElementById(canvas_id);\n        this.context = this.dom_elt.getContext('2d');\n        this.image = null;\n        this.imageElt = null;\n    }\n\n    setSize(width, height) {\n        console.log('set size', width, height);\n        // resolution\n        this.dom_elt.width = width;\n        this.dom_elt.height = height;\n\n        // physical pixels\n        this.dom_elt.style.width = width  + 'px';\n        this.dom_elt.style.height = height + 'px';\n    }\n\n    clear() {\n        this.context.fillStyle = 'green';\n        this.context.fillRect(0, 0, this.dom_elt.width, this.dom_elt.height);\n    }\n\n    getImage() {\n        return this.image;\n    }\n\n    setImage(image) {\n        this.image = image;\n        this.drawImage(image);\n        // this.setSize(image.getWidth(), image.getHeight());\n        // image.render(this.context);\n    }\n\n    reset() {\n        this.render(this.context);\n    }\n\n    drawImage(image) {\n        console.log('draw image', image)\n        // this.context.drawImage(image, 0, 0);\n        this.setSize(image.getWidth(), image.getHeight());\n        image.render(this.context);\n    }\n}\n\nwindow.Viewer = Viewer;\n\nmodule.exports = Viewer;","module.exports = function(grayscaleImage) {\n    const context = document.createElement('canvas').getContext('2d');\n    const imageData = context.createImageData(\n        grayscaleImage.getWidth(),\n        grayscaleImage.getHeight()\n    );\n\n    const input_pixels = grayscaleImage.getPixels();\n    const output_pixels = imageData.data;\n    \n    for (let i = 0; i < input_pixels.length; i++) {\n        output_pixels[i * 4] = input_pixels[i];\n        output_pixels[i * 4 + 1] = input_pixels[i];\n        output_pixels[i * 4 + 2] = input_pixels[i];\n        output_pixels[i * 4 + 3] = 255;\n    }\n\n    return imageData;\n};","const GrayscaleImage = require('../../models/Image/GrayscaleImage.model');\n\nmodule.exports = function(RGBAImage) {\n    const input_pixels = RGBAImage.getPixels(); \n    const grayscale = new GrayscaleImage({\n        width: RGBAImage.getWidth(),\n        height: RGBAImage.getHeight()\n    });\n\n    const output_pixels = grayscale.getPixels();\n\n    for(let i = 0; i < input_pixels.length; i += 4) {\n        const intensity = Math.ceil((\n            0.30 * input_pixels[i] + \n            0.59 * input_pixels[i + 1] + \n            0.11 * input_pixels[i + 2]\n        ) * (input_pixels[i + 4] / 255.0)); \n        \n\n        output_pixels[i / 4] = intensity;\n    }\n\n    console.log('ouput ndg', output_pixels)\n\n    return grayscale;\n};","module.exports = function(basicImage) {\n    const context = document.createElement('canvas').getContext('2d');\n    const imageData = context.createImageData(\n        basicImage.getWidth(),\n        basicImage.getHeight()\n    );\n\n    const input_pixels = basicImage.getPixels();\n    const output_pixels = imageData.data;\n    \n    console.log(input_pixels,input_pixels.length)\n    for (let i = 0; i < input_pixels.length; i++) {\n        output_pixels[i] = Math.min(Math.max(0, input_pixels[i]), 255);\n    }\n\n    return imageData;\n};"],"sourceRoot":""}