{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/main.js","webpack:///./src/models/Image/GrayscaleImage.model.js","webpack:///./src/models/Image/Image.model.js","webpack:///./src/models/Image/RGBAImage.model.js","webpack:///./src/models/layout/viewer.model.js","webpack:///./src/transformations/converters/ChannelReducer.js","webpack:///./src/transformations/converters/GrayscaleToImageData.converter.js","webpack:///./src/transformations/converters/RGBAToGrayscale.converter.js","webpack:///./src/transformations/converters/RGBAToImageData.converter.js","webpack:///./src/transformations/filters/RGBToGrayscale.filter.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAkD;AACK;AAC8B;;;AAGrF,gBAAgB,mEAAM;AACtB,mBAAmB,qEAAS;AAC5B;AACA,qBAAqB,6FAAe;AACpC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,kC;;AAEA;;AAEA,sBAAsB,mBAAmB;AACzC,iE;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;;;;;;;;;;;ACzHA;AAAA;AAAA;AAA2C;AACwD;;AAEnG,6BAA6B,wDAAU;AACvC,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA,eAAe,0GAAoB;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEe,6EAAc,E;;;;;;;;;;;;ACtB7B;AAAA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEe,yEAAU,E;;;;;;;;;;;;ACzDzB;AAAA;AAAA;AAAuC;AAC2D;;AAElG,wBAAwB,oDAAU;AAClC,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA,eAAe,qGAAwB;AACvC;AACA;;AAEe,wEAAS,E;;;;;;;;;;;;ACdxB;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEe,qEAAM,E;;;;;;;;;;;;AC/CrB;AAAA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB;AACA;AACA;AACA;;AAEA;AACA,8BAA8B,2BAA2B;AACzD;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,mBAAmB;AACtC,uBAAuB,gBAAgB;AACvC;AACA,kD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEe,6EAAc,E;;;;;;;;;;;;AC7B7B;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEe,sEAAO,EAAC;;;;;;;;;;;;;ACpBvB;AAAA;AAAA;AAAA;AAAqE;AACA;AACvB;;AAE9C;AACA;AACA,6BAA6B,sEAAqB,uBAAuB,2BAA2B;AACpG,gCAAgC,+DAAc;;AAE9C,eAAe,0EAAc;AAC7B;AACA;AACA;AACA,KAAK;AACL;;AAEe,sEAAO,E;;;;;;;;;;;;AChBtB;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,yBAAyB;AAC5C;AACA;;AAEA;AACA;;AAEe,sEAAO,E;;;;;;;;;;;;ACjBtB;AAAA;AACA;AACA,YAAY,WAAW;AACvB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,sC;AACA;;;;AAIA;AACA,YAAY,WAAW;AACvB,aAAa,W;AACb;AACA,oDAAoD;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,yBAAyB;AAC5C;AACA;AACA;;AAEA;AACA;;AAEe;AACf;AACA;AACA,CAAC,EAAC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","import Viewer from './models/layout/viewer.model';\r\nimport RGBAImage from './models/Image/RGBAImage.model';\r\nimport RGBAToGrayscale from './transformations/converters/RGBAToGrayscale.converter';\r\n\r\n\r\nwindow.Viewer = Viewer;\r\nwindow.RGBAImage = RGBAImage;\r\nwindow.Transformations = {\r\n    RGBAToGrayscale: RGBAToGrayscale\r\n};\r\n\r\nclass MyCanvas {\r\n    constructor(canvas_id) {\r\n        this.dom_elt = document.getElementById(canvas_id);\r\n        this.context = this.dom_elt.getContext('2d');\r\n        this.image = null;\r\n        this.imageElt = null;\r\n    }\r\n\r\n    setSize(width, height) {\r\n        this.width = width;\r\n        //this.context.width = width;\r\n        this.dom_elt.width = width;\r\n        this.dom_elt.style.width = width  + 'px';\r\n\r\n        this.height = height;\r\n        // this.context.height = height;\r\n        this.dom_elt.height = height;\r\n        this.dom_elt.style.height = height + 'px';\r\n    }\r\n\r\n    clear() {\r\n        this.context.fillStyle = 'green';\r\n        this.context.fillRect(0, 0, this.width, this.height);\r\n    }\r\n\r\n    openImage(blob) {\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n            const image = new Image();\r\n            image.onload = () => {\r\n                this.setImage(image);\r\n            };\r\n\r\n            image.src = reader.result;\r\n        };\r\n\r\n        reader.readAsDataURL(blob);\r\n    }\r\n\r\n    loadImage(url) {\r\n        const imageElt = new Image();\r\n        image.crossOrigin = \"\";\r\n        image.src = url;\r\n        image.onload = () => {\r\n            this.setImage(image);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.drawImageData(this.getImage());\r\n    }\r\n\r\n    setImage(image) {\r\n        this.imageElt = image;\r\n        this.setSize(image.width, image.height);\r\n        this.context.drawImage(image,0,0);\r\n\r\n        this.image = this.context.getImageData(0, 0, this.width, this.height);\r\n    }\r\n\r\n    drawImage(image) {\r\n        this.context.drawImage(image, 0, 0);\r\n    }\r\n\r\n    sobel(image) {\r\n        \r\n\r\n            // todo grayscale\r\n        return output;\r\n    }\r\n\r\n    getGrayscale(image) {\r\n          \r\n    }\r\n\r\n    thresholding(threshold) {\r\n        const input = this.getGrayscale(this.getImage());\r\n        const pixels = input.data; \r\n\r\n        const output = this.context.createImageData(this.width, this.height);\r\n\r\n        for(var i = 0; i < pixels.length; i += 4) {\r\n            const intensity = (pixels[i] >= threshold) ? 255 : 0; \r\n\r\n            output.data[i] = intensity;\r\n            output.data[i + 1] = intensity;\r\n            output.data[i + 2] = intensity;\r\n            output.data[i + 3] = 255;\r\n\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    drawImageData(imageData) {\r\n        this.context.putImageData(imageData, 0, 0);\r\n    }\r\n\r\n    getImage() {\r\n        return this.image;\r\n    }\r\n\r\n    threshold() {\r\n        //\r\n    }\r\n}\r\n\r\n\r\nif (typeof window !== 'undefined') {\r\n    window.MyCanvas = MyCanvas;\r\n}\r\n","import BasicImage from './RGBAImage.model';\r\nimport GrayscaleToImageData from '../../transformations/converters/GrayscaleToImageData.converter';\r\n\r\nclass GrayscaleImage extends BasicImage {\r\n    constructor(settings = {}) {\r\n        settings.nbChannels = 1;\r\n        super(settings);\r\n    }\r\n\r\n    getImageData() {\r\n        return GrayscaleToImageData(this);\r\n    }\r\n\r\n    threshold(threshold) {\r\n        // const filter = require('../../transformations/filters/threshold.filter');\r\n        return filter(this, {\r\n            write: true,\r\n            threshold\r\n        });\r\n    }\r\n}\r\n\r\nexport default GrayscaleImage;","class BasicImage {\r\n    constructor(settings = {}) {\r\n        this.mimetype = '';\r\n        this.pixels = [];\r\n        this.nbChannel = settings.nbChannels || 4;\r\n        this.resolution = {\r\n            x: settings.width || 0,\r\n            y: settings.height || 0\r\n        }\r\n\r\n        if (typeof settings.pixels === 'undefined') {\r\n            this.pixels = new Uint8Array(this.resolution.x * this.resolution.y * this.nbChannel);\r\n        }\r\n\r\n        else {\r\n            this.pixels = settings.pixels;\r\n\r\n            if (this.resolution.x * this.resolution.y * this.nbChannel !== this.pixels.length) {\r\n                console.error(this.resolution.x * this.resolution.y * this.nbChannel, '!=', this.pixels.length, this);\r\n            }\r\n        }\r\n    }\r\n\r\n    getPixels() {\r\n        return this.pixels;\r\n    }\r\n\r\n    getWidth() {\r\n        return this.resolution.x;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.resolution.y;\r\n    }\r\n\r\n    getNbChannel() {\r\n        return this.nbChannel;\r\n    }\r\n\r\n    getImageData() {\r\n        throw new Error('Abstract method called \"BasicImage::getImageData\". Please overwrite in sub-class');\r\n    }\r\n\r\n    clone() {\r\n        const factory = this.constructor;\r\n        return new factory({\r\n            width: this.getWidth(),\r\n            height: this.getWidth()\r\n        });\r\n    }\r\n\r\n    render(context) {\r\n        const imageData = this.getImageData();\r\n        context.putImageData(imageData, 0, 0);\r\n    }\r\n}\r\n\r\nexport default BasicImage;","import BasicImage from './Image.model';\r\nimport RGBAToImageDataConverter from '../../transformations/converters/RGBAToImageData.converter';\r\n\r\nclass RGBAImage extends BasicImage {\r\n    constructor(settings = {}) {\r\n        settings.nbChannel = 4;\r\n        super(settings);\r\n    }\r\n\r\n    getImageData() {\r\n        return RGBAToImageDataConverter(this);\r\n    }\r\n}\r\n\r\nexport default RGBAImage;","class Viewer {\r\n    constructor(canvas_id) {\r\n        this.dom_elt = document.getElementById(canvas_id);\r\n        this.context = this.dom_elt.getContext('2d');\r\n        this.image = null;\r\n        this.imageElt = null;\r\n    }\r\n\r\n    setSize(width, height) {\r\n        // resolution\r\n        this.dom_elt.width = width;\r\n        this.dom_elt.height = height;\r\n\r\n        // physical pixels\r\n        this.dom_elt.style.width = width  + 'px';\r\n        this.dom_elt.style.height = height + 'px';\r\n    }\r\n\r\n    clear() {\r\n        this.context.fillStyle = 'green';\r\n        this.context.fillRect(0, 0, this.dom_elt.width, this.dom_elt.height);\r\n    }\r\n\r\n    getImage() {\r\n        return this.image;\r\n    }\r\n\r\n    setImage(image) {\r\n        this.image = image;\r\n        this.drawImage(image);\r\n        // this.setSize(image.getWidth(), image.getHeight());\r\n        // image.render(this.context);\r\n    }\r\n\r\n    reset() {\r\n        this.render(this.context);\r\n    }\r\n\r\n    drawImage(image) {\r\n        // this.context.drawImage(image, 0, 0);\r\n        this.setSize(image.getWidth(), image.getHeight());\r\n        image.render(this.context);\r\n    }\r\n}\r\n\r\nwindow.Viewer = Viewer;\r\n\r\nexport default Viewer;","/**\r\n * @param {Uint8Array} buffer \r\n * @param {Number} nbChannel \r\n * @param {Number[]} channelToRemoveIndexArray \r\n */\r\nfunction channelReducer(buffer, nbChannels, channelToRemoveIndexArray) {\r\n    const newBufferSize = (buffer.length / nbChannels) * (nbChannels - channelToRemoveIndexArray.length);\r\n    const newBuffer = new Uint8Array(newBufferSize);\r\n\r\n    const channelWillBeRemoved = new Array(nbChannels);\r\n    for (let channelIndex = 0; channelIndex < nbChannels; channelIndex++) {\r\n        channelWillBeRemoved[channelIndex] = (\r\n            channelToRemoveIndexArray.indexOf(channelIndex) >= 0\r\n        );\r\n    }\r\n\r\n    let offset = 0;\r\n    for (let i = 0; i < buffer.length; i += nbChannels) {\r\n        for (let j = 0; j < nbChannels; j++) {\r\n            if (channelWillBeRemoved[j] !== true) {\r\n                newBuffer[offset] = buffer[i + j]; \r\n                offset++;\r\n            }\r\n        }\r\n    }\r\n\r\n    return newBuffer;\r\n}\r\n\r\nexport default channelReducer;","function convert(grayscaleImage) {\r\n    const context = document.createElement('canvas').getContext('2d');\r\n    const imageData = context.createImageData(\r\n        grayscaleImage.getWidth(),\r\n        grayscaleImage.getHeight()\r\n    );\r\n\r\n    const input_pixels = grayscaleImage.getPixels();\r\n    const output_pixels = imageData.data;\r\n    \r\n    for (let i = 0; i < input_pixels.length; i++) {\r\n        output_pixels[i * 4] = input_pixels[i];\r\n        output_pixels[i * 4 + 1] = input_pixels[i];\r\n        output_pixels[i * 4 + 2] = input_pixels[i];\r\n        output_pixels[i * 4 + 3] = 255;\r\n    }\r\n\r\n    return imageData;\r\n}\r\n\r\nexport default convert;\r\n","import GrayscaleImage from '../../models/Image/GrayscaleImage.model';\r\nimport RGBAToGrayscaleFilter from '../filters/RGBToGrayscale.filter';\r\nimport ChannelReducer from './ChannelReducer';\r\n\r\nfunction convert(RGBAImage) {\r\n    const input_pixels = RGBAImage.getPixels();\r\n    const grayscalesPixels = RGBAToGrayscaleFilter.filter(input_pixels, { format: \"AlphaImageData\" });\r\n    const reducedPixelsBuffer = ChannelReducer(grayscalesPixels, 4, [0, 1, 2]);\r\n\r\n    return new GrayscaleImage({\r\n        width: RGBAImage.getWidth(),\r\n        height: RGBAImage.getHeight(),\r\n        pixels: reducedPixelsBuffer\r\n    })\r\n}\r\n\r\nexport default convert;","function convert (basicImage) {\r\n    const context = document.createElement('canvas').getContext('2d');\r\n    const imageData = context.createImageData(\r\n        basicImage.getWidth(),\r\n        basicImage.getHeight()\r\n    );\r\n\r\n    const input_pixels = basicImage.getPixels();\r\n    const output_pixels = imageData.data;\r\n\r\n    for (let i = 0; i < input_pixels.length; i++) {\r\n        output_pixels[i] = Math.min(Math.max(0, input_pixels[i]), 255);\r\n    }\r\n\r\n    return imageData;\r\n}\r\n\r\nexport default convert;"," /**\r\n  * \r\n  * @param {Uint8Array} buffer \r\n  * @param {Number} offset \r\n  */\r\n function applyToPixel(buffer, offset) {\r\n    return Math.ceil((\r\n        0.30 * buffer[offset] + \r\n        0.59 * buffer[offset + 1] + \r\n        0.11 * buffer[offset + 2]\r\n    ) * (buffer[offset + 4] / 255.0)); \r\n }\r\n\r\n\r\n \r\n /**\r\n  * @param {Uint8Array} pixels\r\n  * @return {Uint8Array} \r\n  */\r\n function rgbTograyscale(input_pixels, settings = {}) {\r\n    let output_pixels;\r\n    let writePixel;\r\n\r\n    if (settings.format === \"AlphaImageData\") {\r\n        output_pixels = new Uint8Array(input_pixels.length);\r\n        writePixel = (pixelOffset, intensity) => {\r\n            output_pixels[pixelOffset] = 255;\r\n            output_pixels[pixelOffset + 1] = 255;\r\n            output_pixels[pixelOffset + 2] = 255;\r\n            output_pixels[pixelOffset + 3] = intensity\r\n        };\r\n    }\r\n\r\n    else {\r\n        output_pixels = new Uint8Array(input_pixels.length / 4);\r\n        writePixel = (pixelOffset, intensity) => {\r\n            output_pixels[pixelOffset] = intensity;\r\n        };\r\n    }\r\n   \r\n    for (let i = 0; i < input_pixels.length; i += 4) {\r\n        const intensity = applyToPixel(input_pixels, i);\r\n        writePixel(i, intensity);\r\n    }\r\n\r\n    return output_pixels;\r\n}\r\n\r\nexport default {\r\n    filter: rgbTograyscale,\r\n    applyToPixel: applyToPixel\r\n};\r\n"],"sourceRoot":""}